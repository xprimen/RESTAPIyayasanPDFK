generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
  output                           = "./zod"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  // id                Int      @id @default(autoincrement())
  userId            String?  @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user Users? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @map("session_token")
  refreshToken String    @map("refresh_token")
  device       String
  userId       String    @map("user_id")
  expires      DateTime
  logout       DateTime?
  user         Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  @@unique([userId, device])
  @@map("sessions")
}

model Users {
  id            String    @id @default(cuid()) ///@zod.string.min(3,{message:"Minimal 3 Karakter"}).max(20,{message:"Maksimal 20 Karakter"})
  username      String    @unique @db.VarChar(20) ///@zod.string.min(3,{message:"Minimal 3 Karakter"}).max(20,{message:"Maksimal 20 Karakter"})
  password      String    @db.VarChar(100) ///@zod.string.min(5,{message:"Minimal 5 Karakter"})
  email         String?   @unique ///@zod.string.email({message:"Email Tidak Valid"})
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roleId        Int
  role          Role      @relation(fields: [roleId], references: [id], onDelete: NoAction)
  active        Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  deletedAt     DateTime? @map(name: "deleted_at")
  profile       Profiles?

  @@map("users")
}

model Profiles {
  id     Int     @id @default(autoincrement())
  name   String
  bio    String?
  userId String  @unique @map("user_id")
  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Role {
  id          Int                  @id @default(autoincrement())
  rolekey     String               @unique
  rolename    String
  permissions RoleHavePermission[]
  users       Users[]

  @@map("role")
}

model RoleHavePermission {
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([permissionId, roleId])
  @@index([permissionId, roleId])
  @@map("roleHavePermission")
}

model Permission {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  roles       RoleHavePermission[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?

  @@map("permission")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@unique([identifier, token])
  @@map("verification_requests")
}
